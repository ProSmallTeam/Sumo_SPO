//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleWCFClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDbTaskManager")]
    public interface IDbTaskManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/GetTasks", ReplyAction="http://tempuri.org/IDbTaskManager/GetTasksResponse")]
        string[] GetTasks(int maxCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/GetTasks", ReplyAction="http://tempuri.org/IDbTaskManager/GetTasksResponse")]
        System.Threading.Tasks.Task<string[]> GetTasksAsync(int maxCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/AddTasks", ReplyAction="http://tempuri.org/IDbTaskManager/AddTasksResponse")]
        void AddTasks(string[] pathsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/AddTasks", ReplyAction="http://tempuri.org/IDbTaskManager/AddTasksResponse")]
        System.Threading.Tasks.Task AddTasksAsync(string[] pathsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/AddTasksWithHightPriority", ReplyAction="http://tempuri.org/IDbTaskManager/AddTasksWithHightPriorityResponse")]
        void AddTasksWithHightPriority(string[] pathsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/AddTasksWithHightPriority", ReplyAction="http://tempuri.org/IDbTaskManager/AddTasksWithHightPriorityResponse")]
        System.Threading.Tasks.Task AddTasksWithHightPriorityAsync(string[] pathsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/TestOperation", ReplyAction="http://tempuri.org/IDbTaskManager/TestOperationResponse")]
        string TestOperation(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbTaskManager/TestOperation", ReplyAction="http://tempuri.org/IDbTaskManager/TestOperationResponse")]
        System.Threading.Tasks.Task<string> TestOperationAsync(string str);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDbTaskManagerChannel : SimpleWCFClient.ServiceReference1.IDbTaskManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DbTaskManagerClient : System.ServiceModel.ClientBase<SimpleWCFClient.ServiceReference1.IDbTaskManager>, SimpleWCFClient.ServiceReference1.IDbTaskManager {
        
        public DbTaskManagerClient() {
        }
        
        public DbTaskManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DbTaskManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DbTaskManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DbTaskManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetTasks(int maxCount) {
            return base.Channel.GetTasks(maxCount);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTasksAsync(int maxCount) {
            return base.Channel.GetTasksAsync(maxCount);
        }
        
        public void AddTasks(string[] pathsList) {
            base.Channel.AddTasks(pathsList);
        }
        
        public System.Threading.Tasks.Task AddTasksAsync(string[] pathsList) {
            return base.Channel.AddTasksAsync(pathsList);
        }
        
        public void AddTasksWithHightPriority(string[] pathsList) {
            base.Channel.AddTasksWithHightPriority(pathsList);
        }
        
        public System.Threading.Tasks.Task AddTasksWithHightPriorityAsync(string[] pathsList) {
            return base.Channel.AddTasksWithHightPriorityAsync(pathsList);
        }
        
        public string TestOperation(string str) {
            return base.Channel.TestOperation(str);
        }
        
        public System.Threading.Tasks.Task<string> TestOperationAsync(string str) {
            return base.Channel.TestOperationAsync(str);
        }
    }
}
